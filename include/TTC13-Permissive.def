definition

module Common
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    [A-Za-z0-9\_]                  -> WATERTOKENSTART     {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
    "*"                            -> WATERTOKENSTAR      {recover, avoid}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               
                                   -> WATEREOF            
    "completion123"                -> COMPLETIONPREFIX    {completion}
    "|#WATERTOKENSTAR|"            -> WATERTOKENSTAR      {completion}
    "|#STRING|"                    -> STRING              {completion}
    "|#StringChar|"                -> StringChar          {completion}
    "|#BackSlashChar|"             -> BackSlashChar       {completion}
    "|#Event|"                     -> Event               {completion}
    "|#EventOp|"                   -> EventOp             {completion}
    "|#Definition|"                -> Definition          {completion}
    "|#Process|"                   -> Process             {completion}
    "|#ID|"                        -> ID                  {completion}

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                              
    "\""                                          -> INSERTOPENQUOTE {recover}
    INSERTOPENQUOTE StringChar* "\n"              -> STRING          {cons("INSERTEND")}
    INSERTOPENQUOTE StringChar* WATEREOF          -> STRING          {cons("INSERTEND")}
    "/*"                                          -> INSERTSTART     {recover}
    INSERTSTART ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT          {cons("INSERTEND")}
                                                  -> "event"         {recover, cons("INSERTION")}
                                                  -> "process"       {recover, cons("INSERTION")}
                                                  -> "instance"      {recover, cons("INSERTION")}
                                                  -> ")"             {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]*              -> ID            
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
                                       -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

module TTC13
imports Common

exports
  context-free start-symbols
    Start

  context-free syntax
    Program -> Start 

  context-free syntax
    Definition* -> Program {cons("Program")}

  context-free syntax
    ID                 -> Event      {cons("Event")}
    EventOp            -> Event      
    EventOp "[" ID "]" -> Event      {cons("EventCall")}
    "throw"            -> EventOp    {cons("Throw")}
    "catch"            -> EventOp    {cons("Catch")}
    "end"              -> EventOp    {cons("End")}
    "start"            -> EventOp    {cons("Start")}
    "event" ID         -> Definition {cons("EventDef")}
    "throw"            -> ID         {reject}
    "catch"            -> ID         {reject}
    "end"              -> ID         {reject}
    "start"            -> ID         {reject}

  context-free syntax
    "process" ID "=" Process -> Definition {cons("ProcessDef")}
    "instance" Process       -> Definition {cons("ProcessInst")}
    Event                    -> Process    
    "(" Process ")"          -> Process    {bracket}
    "token"                  -> Process    {cons("Token")}
    "token"                  -> ID         {reject}

  context-free priorities
    Process ";" Process -> Process {cons("Seq"), assoc} >
    {non-assoc:
      Process "+" Process -> Process {cons("InclOr"), assoc}
      Process "X" Process -> Process {cons("ExclOr"), assoc}
    } >
    Process "||" Process -> Process {cons("Par"), assoc}