definition
module TTC13generated
exports
  context-free start-symbols
    Program

  context-free syntax
    Definition* -> Program {cons("Program")}

  context-free syntax
    CONTENTCOMPLETE -> Program {cons("COMPLETION-Program")}

  context-free syntax
    EventOp -> Event   {cons("Event")}
    ID      -> EventOp {cons("Base")}
    "start" -> EventOp {cons("Start")}
    "end"   -> EventOp {cons("End")}
    "end"   -> ID      {reject}
    "start" -> ID      {reject}

  context-free syntax
    CONTENTCOMPLETE -> Event   {cons("COMPLETION-Event")}
    CONTENTCOMPLETE -> EventOp {cons("COMPLETION-EventOp")}
    CONTENTCOMPLETE -> ID      {cons("COMPLETION-ID")}

  context-free syntax
    "process" ID "=" Process -> Definition {cons("ProcessDef")}
    "instance" Process       -> Definition {cons("ProcessInst")}
    Event                    -> Process    
    "(" Process ")"          -> Process    {bracket}
    "token"                  -> Process    {cons("Token")}
    "token"                  -> ID         {reject}
    Process ";" Process      -> Process    {cons("Seq"), assoc}
    Process "+" Process      -> Process    {cons("ExclOr"), assoc}
    Process "||" Process     -> Process    {cons("Par"), assoc}
    "process"                -> ID         {reject}
    "instance"               -> ID         {reject}

  context-free syntax
    CONTENTCOMPLETE -> Definition {cons("COMPLETION-Definition")}
    CONTENTCOMPLETE -> Process    {cons("COMPLETION-Process")}
    CONTENTCOMPLETE -> ID         {cons("COMPLETION-ID")}

  context-free priorities
    Process ";" Process -> Process >
    Process "+" Process -> Process >
    Process "||" Process -> Process

module Common

exports

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9]* -> ID
    "-"? [0-9]+          -> INT
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]

module TTC13

imports Common TTC13generated

%% exports
%% 
%%   context-free start-symbols Start
%% 
%%   context-free syntax
%%   
%%     Program -> Start
%% 
%%   context-free syntax
%%     
%%     Definition* -> Program {"Program"}
%%     
%%   context-free syntax
%%         
%%     ID                 -> Event {"Event"}  
%%     EventOp            -> Event {"Event"}
%%     EventOp "[" ID "]" -> Event {"EventCall"}
%%     
%%     "throw"            -> EventOp {"Throw"}
%%     "catch"            -> EventOp {"Catch"}
%%     "end"              -> EventOp {"End"}
%%     "start"            -> EventOp {"Start"}
%%             
%%     "event" ID         -> Definition {"EventDef"}
%%     
%%     "throw"  -> ID {reject}
%%     "catch"  -> ID {reject} 
%%     "end"    -> ID {reject} 
%%     "start"  -> ID {reject}
%%     
%%   context-free syntax
%%     
%%     "process" ID "=" Process -> Definition {"ProcessDef"}
%%     
%%     
%%     "instance" Process -> Definition {"ProcessInst"}
%%   
%%     Event              -> Process
%%     "(" Process ")"    -> Process {bracket}
%%     
%%     "token"              -> Process {"Token"}
%%     "token"              -> ID {reject}
%%       
%%   context-free priorities
%%     
%%     Process ";" Process -> Process {"Seq", assoc}    
%%     > {non-assoc:
%%        Process "+" Process -> Process {"InclOr", assoc}
%%        Process "X" Process -> Process {"ExclOr", assoc}
%%       }
%%     > Process "||" Process -> Process {"Par", assoc}
%%     
